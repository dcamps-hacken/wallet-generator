{
  "address": "0x0823c4dB7D8A21DC6a9F481c3F064C723Ae0621e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "walletType",
          "type": "string"
        }
      ],
      "name": "WalletCreate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createDestroyableWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSimpleWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_Id",
          "type": "uint256"
        }
      ],
      "name": "getWalletFromId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_numberOfWallets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_wallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb70b085d070fe7c0662b2806631a3c6db74e1e7b389cbbffecedab7ec19f533a",
  "receipt": {
    "to": null,
    "from": "0xE5aD97f1731174D14A71D43Bd06E94a1D3e59A4a",
    "contractAddress": "0x0823c4dB7D8A21DC6a9F481c3F064C723Ae0621e",
    "transactionIndex": 13,
    "gasUsed": "1608281",
    "logsBloom": "0x
    "blockHash": "0x6ccddb38d30baf6f0183fd672edaaba6669cae15a7eb808ab8aa215d1e83c7be",
    "transactionHash": "0xb70b085d070fe7c0662b2806631a3c6db74e1e7b389cbbffecedab7ec19f533a",
    "logs": [],
    "blockNumber": 10895728,
    "cumulativeGasUsed": "2831358",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "df99494d880c3277d497d52c7099fd85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"walletType\",\"type\":\"string\"}],\"name\":\"WalletCreate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createDestroyableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSimpleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"getWalletFromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_numberOfWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Camps Novi\",\"details\":\"This contract uses a factory pattern to deploy a new wallet for each user\",\"kind\":\"dev\",\"methods\":{\"createSimpleWallet()\":{\"details\":\"The wallet addresses and Ids are stored in mappings so that users can get  their wallet addresses.\"}},\"title\":\"EVM wallet generator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSimpleWallet()\":{\"notice\":\"This is the function that will deploy a new wallet every time it's called.\"},\"getLatestWallet()\":{\"notice\":\"Use this function to get the address of your last created wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletGenerator.sol\":\"WalletGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DestroyableWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nerror DestroyableWallet__Unauthorized();\\r\\nerror DestroyableWallet__ClosedWallet();\\r\\nerror DestroyableWallet__StatusNotPreDestroy();\\r\\n\\r\\n/** @title EVM wallet\\r\\n *  @author David Camps Novi\\r\\n *  @dev This contract has some common functions used in a wallet\\r\\n */\\r\\ncontract DestroyableWallet {\\r\\n    enum WalletStatus {\\r\\n        CLOSED,\\r\\n        PREDESTROY,\\r\\n        OPEN\\r\\n    }\\r\\n\\r\\n    WalletStatus public s_status;\\r\\n\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    event FundsReceived(address indexed sender, uint256 amount);\\r\\n    event FundsTransfer(address indexed recipient, uint256 amount);\\r\\n    event AllWithdraw(uint256 _amount);\\r\\n    event WalletDelete(address recipient, uint256 amount);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) revert DestroyableWallet__Unauthorized();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier walletOpen() {\\r\\n        if (s_status != WalletStatus.OPEN)\\r\\n            revert DestroyableWallet__ClosedWallet();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        i_owner = _owner;\\r\\n        s_status = WalletStatus.OPEN;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        //msg.data is empty\\r\\n        if (s_status != WalletStatus.OPEN)\\r\\n            revert DestroyableWallet__ClosedWallet();\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        //msg.data is not empty\\r\\n        if (s_status != WalletStatus.OPEN)\\r\\n            revert DestroyableWallet__ClosedWallet();\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function transfers some funds from this wallet to another address.\\r\\n     */\\r\\n    function transferFunds(uint256 _amount, address _recipient)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        payable(_recipient).transfer(_amount);\\r\\n        emit FundsTransfer(_recipient, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function withdraws the whole balance of this wallet to the address\\r\\n     *  that deployed it.\\r\\n     */\\r\\n    function withdrawAll(uint256 _amount) external onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n        emit AllWithdraw(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This wallet comes with a selfdestruct functionality. In order to add extra\\r\\n     *  protection, this is a two-step process: first call preDestroy(), then deleteWallet().\\r\\n     *  Use the function cancelPreDestroy() if you want to restore the wallet to the previous\\r\\n     *  status. Once the wallet is destroyed, all its funds will be send to a given address and\\r\\n     *  the wallet will become inoperative.\\r\\n     *  @dev To control the status of the wallet, an enum \\\"status\\\" has been generated. The\\r\\n     *  function deleteWallet() can only be called if the status is PREDESTROY. The status\\r\\n     *  of the wallet can be checked with the function getStatus().\\r\\n     *  @param _recipient Is the address to which the funds of this wallet will be sent.\\r\\n     */\\r\\n    function destroyWallet(address _recipient) external onlyOwner walletOpen {\\r\\n        if (s_status != WalletStatus.PREDESTROY)\\r\\n            revert DestroyableWallet__StatusNotPreDestroy();\\r\\n        emit WalletDelete(_recipient, address(this).balance);\\r\\n        selfdestruct(payable(_recipient));\\r\\n    }\\r\\n\\r\\n    function preDestroy() external onlyOwner {\\r\\n        s_status = WalletStatus.PREDESTROY;\\r\\n    }\\r\\n\\r\\n    function cancelPreDestroy() external onlyOwner {\\r\\n        s_status = WalletStatus.OPEN;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function returns the address of your address.\\r\\n     */\\r\\n    function getBalance() external view returns (uint256) {\\r\\n        return (address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev This function will return '2' if the wallet is in its steady state and '1'\\r\\n     *  if it's in PREDESTROY status.\\r\\n     */\\r\\n    function getStatus() external view returns (WalletStatus) {\\r\\n        return s_status;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e2cdd39a4f21e4580ba8564cf23f6865d990ced80dda4422f2df296d1b5c513\",\"license\":\"Unlicense\"},\"contracts/MultisigWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nerror MultisigWallet__Unauthorized();\\r\\nerror MultisigWallet__AlreadyApproved();\\r\\nerror MultisigWallet_NotEnoughConfirmations();\\r\\n\\r\\ncontract MultisigWallet {\\r\\n    struct Tx {\\r\\n        uint256 amount;\\r\\n        address recipient;\\r\\n        uint256 confirmations;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    uint256 private nextTxId;\\r\\n    uint256 private requiredConfirmations;\\r\\n    mapping(uint256 => Tx) private s_txs;\\r\\n    mapping(address => bool) private s_owners;\\r\\n    mapping(uint256 => mapping(address => bool)) s_approvals;\\r\\n\\r\\n    event FundsReceived(address indexed sender, uint256 amount);\\r\\n    event TxSubmit(uint256 txId, address requester);\\r\\n    event TxApprove(uint256 txId, address approver);\\r\\n    event TxSend(uint256 txId, address sender);\\r\\n\\r\\n    modifier onlyOwners() {\\r\\n        if (s_owners[msg.sender] != true) revert MultisigWallet__Unauthorized();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address[3] memory _owners, uint256 _requiredConfirmations) {\\r\\n        for (uint256 i; i < _owners.length; i++) {\\r\\n            s_owners[_owners[i]] = true;\\r\\n        }\\r\\n        requiredConfirmations = _requiredConfirmations;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function submitTx(uint256 _amount, address _recipient) external onlyOwners {\\r\\n        s_txs[nextTxId] = Tx({\\r\\n            amount: _amount,\\r\\n            recipient: _recipient,\\r\\n            confirmations: 1,\\r\\n            executed: false\\r\\n        });\\r\\n        s_approvals[nextTxId][msg.sender] = true;\\r\\n        emit TxSubmit(nextTxId, msg.sender);\\r\\n        nextTxId += 1;\\r\\n    }\\r\\n\\r\\n    function approveTx(uint256 _txId) external onlyOwners {\\r\\n        if (s_approvals[_txId][msg.sender] != false)\\r\\n            revert MultisigWallet__AlreadyApproved();\\r\\n        s_txs[_txId].confirmations += 1;\\r\\n        emit TxApprove(_txId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function sendTx(uint256 _txId) external onlyOwners {\\r\\n        if (s_txs[_txId].confirmations < requiredConfirmations)\\r\\n            revert MultisigWallet_NotEnoughConfirmations();\\r\\n        address payable recipient = payable(s_txs[_txId].recipient);\\r\\n        uint256 amount = s_txs[_txId].amount;\\r\\n        recipient.transfer(amount);\\r\\n        emit TxSend(_txId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function addOwner(address _newOwner) external onlyOwners {\\r\\n        s_owners[_newOwner] = true;\\r\\n    }\\r\\n\\r\\n    function removeOwner(address _newOwner) external onlyOwners {\\r\\n        s_owners[_newOwner] = false;\\r\\n    }\\r\\n\\r\\n    function changeConfirmations(uint256 _newConfirmations) external {\\r\\n        requiredConfirmations = _newConfirmations;\\r\\n    }\\r\\n\\r\\n    function getBalance() external view returns (uint256) {\\r\\n        return (address(this).balance);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x70f8f86d65d1e90824abd75dbf842baf433aa95936d04b011638ed9908e10f17\",\"license\":\"Unlicense\"},\"contracts/SimpleWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nerror SimpleWallet__Unauthorized();\\r\\n\\r\\n/** @title EVM wallet\\r\\n *  @author David Camps Novi\\r\\n *  @dev This contract has some common functions used in a wallet\\r\\n */\\r\\ncontract SimpleWallet {\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    event FundsReceived(address indexed sender, uint256 amount);\\r\\n    event FundsTransfer(address indexed recipient, uint256 amount);\\r\\n    event AllWithdraw(uint256 _amount);\\r\\n    event WalletDelete(address recipient, uint256 amount);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) revert SimpleWallet__Unauthorized();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        i_owner = _owner;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function transfers some funds from this wallet to another address.\\r\\n     */\\r\\n    function transferFunds(uint256 _amount, address _recipient)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        payable(_recipient).transfer(_amount);\\r\\n        emit FundsTransfer(_recipient, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function withdraws the whole balance of this wallet to the address\\r\\n     *  that deployed it.\\r\\n     */\\r\\n    function withdrawAll(uint256 _amount) external onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n        emit AllWithdraw(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function returns the address of your address.\\r\\n     */\\r\\n    function getBalance() external view returns (uint256) {\\r\\n        return (address(this).balance);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x11ba68bcc680d9a0c825ed2ee5b7decbdb56cbdef31e3b1e8d5663fc4bb45f5e\",\"license\":\"Unlicense\"},\"contracts/WalletGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./SimpleWallet.sol\\\";\\r\\nimport \\\"./DestroyableWallet.sol\\\";\\r\\nimport \\\"./MultisigWallet.sol\\\";\\r\\n\\r\\n/** @title EVM wallet generator\\r\\n *  @author David Camps Novi\\r\\n *  @dev This contract uses a factory pattern to deploy a new wallet for each user\\r\\n */\\r\\ncontract WalletGenerator {\\r\\n    mapping(address => mapping(uint256 => address)) public s_wallets;\\r\\n    /* Number of Wallets created by each User */\\r\\n    mapping(address => uint256) public s_numberOfWallets;\\r\\n\\r\\n    event WalletCreate(\\r\\n        address indexed owner,\\r\\n        address indexed walletAddress,\\r\\n        string walletType\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @notice This is the function that will deploy a new wallet every time it's called.\\r\\n     *  @dev The wallet addresses and Ids are stored in mappings so that users can get\\r\\n     *  their wallet addresses.\\r\\n     */\\r\\n    function createSimpleWallet() external {\\r\\n        SimpleWallet newWallet = new SimpleWallet(msg.sender);\\r\\n        uint256 nextWalletId = s_numberOfWallets[msg.sender];\\r\\n        s_wallets[msg.sender][nextWalletId] = address(newWallet);\\r\\n        s_numberOfWallets[msg.sender] += 1;\\r\\n        emit WalletCreate(msg.sender, address(newWallet), \\\"SimpleWallet\\\");\\r\\n    }\\r\\n\\r\\n    function createDestroyableWallet() external {\\r\\n        DestroyableWallet newWallet = new DestroyableWallet(msg.sender);\\r\\n        uint256 nextWalletId = s_numberOfWallets[msg.sender];\\r\\n        s_wallets[msg.sender][nextWalletId] = address(newWallet);\\r\\n        s_numberOfWallets[msg.sender] += 1;\\r\\n        emit WalletCreate(msg.sender, address(newWallet), \\\"DestroyableWallet\\\");\\r\\n    }\\r\\n\\r\\n    /* function createMultisigWallet(\\r\\n        address[3] memory _owners,\\r\\n        uint256 _requiredConfirmations\\r\\n    ) external {\\r\\n        MultisigWallet newWallet = new MultisigWallet(\\r\\n            _owners,\\r\\n            _requiredConfirmations\\r\\n        );\\r\\n        uint256 nextWalletId = s_numberOfWallets[msg.sender];\\r\\n        s_wallets[msg.sender][nextWalletId] = address(newWallet);\\r\\n        s_numberOfWallets[msg.sender] += 1;\\r\\n        emit WalletCreate(msg.sender, address(newWallet), \\\"MultisigWallet\\\");\\r\\n    } */\\r\\n\\r\\n    /**\\r\\n     *  @notice Use this function to get the address of your last created wallet\\r\\n     */\\r\\n    function getLatestWallet() external view returns (address) {\\r\\n        uint256 latestId = s_numberOfWallets[msg.sender] - 1;\\r\\n        return (s_wallets[msg.sender][latestId]);\\r\\n    }\\r\\n\\r\\n    function getWalletFromId(uint256 _Id) external view returns (address) {\\r\\n        return s_wallets[msg.sender][_Id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b4c82e5d33025baa3cb4cec34194d33c5e4c644ec1b3100fae7ae09b12a7547\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611c4b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063069af1701461006757806311047d951461009757806341e588e9146100c75780635af90cdb146100e55780635eaf614d14610115578063eb574fd61461011f575b600080fd5b610081600480360381019061007c9190610694565b610129565b60405161008e91906107ed565b60405180910390f35b6100b160048036038101906100ac91906106c1565b610141565b6040516100be9190610792565b60405180910390f35b6100cf610183565b6040516100dc9190610792565b60405180910390f35b6100ff60048036038101906100fa9190610701565b610249565b60405161010c9190610792565b60405180910390f35b61011d6102c2565b005b610127610489565b005b60016020528060005260406000206000915090505481565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101d1919061086f565b90506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000336040516102d190610650565b6102db9190610792565b604051809103906000f0801580156102f7573d6000803e3d6000fd5b5090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461041b9190610819565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f01a5d4b6d3c14edb12516667536b3fd020be5fcdcac29048a1f0a55e3ee4763b60405161047d906107ad565b60405180910390a35050565b6000336040516104989061065d565b6104a29190610792565b604051809103906000f0801580156104be573d6000803e3d6000fd5b5090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105e29190610819565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f01a5d4b6d3c14edb12516667536b3fd020be5fcdcac29048a1f0a55e3ee4763b604051610644906107cd565b60405180910390a35050565b6106108061099483390190565b610c7280610fa483390190565b60008135905061067981610965565b92915050565b60008135905061068e8161097c565b92915050565b6000602082840312156106aa576106a961090e565b5b60006106b88482850161066a565b91505092915050565b600080604083850312156106d8576106d761090e565b5b60006106e68582860161066a565b92505060206106f78582860161067f565b9150509250929050565b6000602082840312156107175761071661090e565b5b60006107258482850161067f565b91505092915050565b610737816108a3565b82525050565b600061074a600c83610808565b915061075582610913565b602082019050919050565b600061076d601183610808565b91506107788261093c565b602082019050919050565b61078c816108d5565b82525050565b60006020820190506107a7600083018461072e565b92915050565b600060208201905081810360008301526107c68161073d565b9050919050565b600060208201905081810360008301526107e681610760565b9050919050565b60006020820190506108026000830184610783565b92915050565b600082825260208201905092915050565b6000610824826108d5565b915061082f836108d5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610864576108636108df565b5b828201905092915050565b600061087a826108d5565b9150610885836108d5565b925082821015610898576108976108df565b5b828203905092915050565b60006108ae826108b5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f53696d706c6557616c6c65740000000000000000000000000000000000000000600082015250565b7f44657374726f7961626c6557616c6c6574000000000000000000000000000000600082015250565b61096e816108a3565b811461097957600080fd5b50565b610985816108d5565b811461099057600080fd5b5056fe60a060405234801561001057600080fd5b5060405161061038038061061083398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100ff565b60008151905061007e816100e8565b92915050565b60006020828403121561009a576100996100e3565b5b60006100a88482850161006f565b91505092915050565b60006100bc826100c3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100f1816100b1565b81146100fc57600080fd5b50565b60805160601c6104ec61012460003960008181610164015261026a01526104ec6000f3fe6080604052600436106100385760003560e01c806312065fe0146100dd578063958e2d3114610108578063f08e362f146101315761008d565b3661008d573373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f34604051610083919061042c565b60405180910390a2005b3373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f346040516100d3919061042c565b60405180910390a2005b3480156100e957600080fd5b506100f261015a565b6040516100ff919061042c565b60405180910390f35b34801561011457600080fd5b5061012f600480360381019061012a91906103b0565b610162565b005b34801561013d57600080fd5b50610158600480360381019061015391906103dd565b610268565b005b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e7576040517ffbe34a0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561022d573d6000803e3d6000fd5b507ff01e20b4bd95fdc42daa2d7c96d4d4cf83ee0bda1723dda838c57102e47d16808160405161025d919061042c565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ed576040517ffbe34a0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610333573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167fe4a4217f2dc0b69a9a45e3fd49d47fc0e2081b6590b9c8bfa4b7d3f17dfdf9178360405161037a919061042c565b60405180910390a25050565b60008135905061039581610488565b92915050565b6000813590506103aa8161049f565b92915050565b6000602082840312156103c6576103c5610483565b5b60006103d48482850161039b565b91505092915050565b600080604083850312156103f4576103f3610483565b5b60006104028582860161039b565b925050602061041385828601610386565b9150509250929050565b61042681610479565b82525050565b6000602082019050610441600083018461041d565b92915050565b600061045282610459565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b61049181610447565b811461049c57600080fd5b50565b6104a881610479565b81146104b357600080fd5b5056fea2646970667358221220fcb725a714412e7a835e378d24947fdb9b7adc635aebe1bd1d6ad59268874a0b64736f6c6343000807003360a060405234801561001057600080fd5b50604051610c72380380610c72833981810160405281019061003291906100ae565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060026000806101000a81548160ff0219169083600281111561008e5761008d61010d565b5b021790555050610158565b6000815190506100a881610141565b92915050565b6000602082840312156100c4576100c361013c565b5b60006100d284828501610099565b91505092915050565b60006100e6826100ed565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b61014a816100db565b811461015557600080fd5b50565b60805160601c610ae061019260003960008181610324015281816104ff015281816105b0015281816106b601526107670152610ae06000f3fe60806040526004361061007f5760003560e01c80636ec7c08b1161004e5780636ec7c08b146102a2578063958e2d31146102b9578063cea73e13146102e2578063f08e362f146102f95761013e565b80630ce62df4146101f857806312065fe0146102215780631ca5872c1461024c5780634e69d560146102775761013e565b3661013e5760028081111561009757610096610a34565b5b60008054906101000a900460ff1660028111156100b7576100b6610a34565b5b146100ee576040517ff3884b3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f3460405161013491906109b8565b60405180910390a2005b60028081111561015157610150610a34565b5b60008054906101000a900460ff16600281111561017157610170610a34565b5b146101a8576040517ff3884b3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f346040516101ee91906109b8565b60405180910390a2005b34801561020457600080fd5b5061021f600480360381019061021a91906108ad565b610322565b005b34801561022d57600080fd5b506102366104ce565b60405161024391906109b8565b60405180910390f35b34801561025857600080fd5b506102616104d6565b60405161026e919061099d565b60405180910390f35b34801561028357600080fd5b5061028c6104e7565b604051610299919061099d565b60405180910390f35b3480156102ae57600080fd5b506102b76104fd565b005b3480156102c557600080fd5b506102e060048036038101906102db91906108da565b6105ae565b005b3480156102ee57600080fd5b506102f76106b4565b005b34801561030557600080fd5b50610320600480360381019061031b9190610907565b610765565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a7576040517fd8eb553e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002808111156103ba576103b9610a34565b5b60008054906101000a900460ff1660028111156103da576103d9610a34565b5b14610411576040517ff3884b3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600281111561042557610424610a34565b5b60008054906101000a900460ff16600281111561044557610444610a34565b5b1461047c576040517fbbd2929700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f998e6e05d2330299382a81281a339769590db319d1246f9818ce2f46128c13c681476040516104ad929190610974565b60405180910390a18073ffffffffffffffffffffffffffffffffffffffff16ff5b600047905090565b60008054906101000a900460ff1681565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610582576040517fd8eb553e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff021916908360028111156105a7576105a6610a34565b5b0217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610633576040517fd8eb553e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610679573d6000803e3d6000fd5b507ff01e20b4bd95fdc42daa2d7c96d4d4cf83ee0bda1723dda838c57102e47d1680816040516106a991906109b8565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610739576040517fd8eb553e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000806101000a81548160ff0219169083600281111561075e5761075d610a34565b5b0217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ea576040517fd8eb553e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610830573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167fe4a4217f2dc0b69a9a45e3fd49d47fc0e2081b6590b9c8bfa4b7d3f17dfdf9178360405161087791906109b8565b60405180910390a25050565b60008135905061089281610a7c565b92915050565b6000813590506108a781610a93565b92915050565b6000602082840312156108c3576108c2610a63565b5b60006108d184828501610883565b91505092915050565b6000602082840312156108f0576108ef610a63565b5b60006108fe84828501610898565b91505092915050565b6000806040838503121561091e5761091d610a63565b5b600061092c85828601610898565b925050602061093d85828601610883565b9150509250929050565b610950816109d3565b82525050565b61095f81610a22565b82525050565b61096e81610a18565b82525050565b60006040820190506109896000830185610947565b6109966020830184610965565b9392505050565b60006020820190506109b26000830184610956565b92915050565b60006020820190506109cd6000830184610965565b92915050565b60006109de826109f8565b9050919050565b60008190506109f382610a68565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a2d826109e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b60038110610a7957610a78610a34565b5b50565b610a85816109d3565b8114610a9057600080fd5b50565b610a9c81610a18565b8114610aa757600080fd5b5056fea2646970667358221220e5aaabf7c2567654c02effc53c65231112f2a20651565386a2840ba02ff3d5de64736f6c63430008070033a264697066735822122025e57fe56d39a5fb0894938aff708c296dfbaaebe1926ca7a80d3cb11353605864736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "David Camps Novi",
    "details": "This contract uses a factory pattern to deploy a new wallet for each user",
    "kind": "dev",
    "methods": {
      "createSimpleWallet()": {
        "details": "The wallet addresses and Ids are stored in mappings so that users can get  their wallet addresses."
      }
    },
    "title": "EVM wallet generator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSimpleWallet()": {
        "notice": "This is the function that will deploy a new wallet every time it's called."
      },
      "getLatestWallet()": {
        "notice": "Use this function to get the address of your last created wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 700,
        "contract": "contracts/WalletGenerator.sol:WalletGenerator",
        "label": "s_wallets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 704,
        "contract": "contracts/WalletGenerator.sol:WalletGenerator",
        "label": "s_numberOfWallets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}